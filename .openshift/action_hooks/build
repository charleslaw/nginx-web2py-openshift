#!/bin/bash
# This is a simple build script and will be executed on your CI system if 
# available.  Otherwise it will execute while your application is stopped
# before the deploy step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

export HOME=$OPENSHIFT_HOMEDIR
NGINX_DIR="$OPENSHIFT_DATA_DIR/nginx"
VIRTUALENV_DIR="$OPENSHIFT_DATA_DIR/env"

LONG_PROCESS=$OPENSHIFT_REPO_DIR/misc/utils/execute_long_process
CURL="curl -L --progress-bar"
USER_CONFIG=$OPENSHIFT_REPO_DIR/misc/utils/get_user_config

source $OPENSHIFT_REPO_DIR/misc/utils/color_output
source $OPENSHIFT_REPO_DIR/misc/utils/virtualenv

# try to guess the number of processors from /proc/cpuinfo
if [ -f /proc/cpuinfo ]; then
	NUMBER_OF_PROCESSORS=$(grep -c ^processor /proc/cpuinfo)
else
	NUMBER_OF_PROCESSORS=1
fi

# the following functions are used to check if the packages we use in this
# cartridge are already installed or not, and if they are not, installs them
function check_nginx_installed() {
	info_message 'Checking for nginx... '
	if [ -e $NGINX_DIR ]; then
		success_message 'nginx is installed!'
		return
	fi

	info_message 'Downloading and installing nginx... '
	local NGINX_DOWNLOAD_FILE="http://nginx.org/download/nginx-1.4.1.tar.gz"
	local PCRE_DOWNLOAD_FILE="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.32.tar.gz"

	local NGINX_OUT_DIR="$OPENSHIFT_TMP_DIR/nginx-1.4.1"
	local PCRE_OUT_DIR="$OPENSHIFT_TMP_DIR/pcre-8.32"

	cd $OPENSHIFT_TMP_DIR
	$CURL $NGINX_DOWNLOAD_FILE | tar xzf -
	$CURL $PCRE_DOWNLOAD_FILE | tar xzf -

	cd $NGINX_OUT_DIR
	$LONG_PROCESS ./configure --prefix=$NGINX_DIR --with-http_ssl_module --with-pcre=$PCRE_OUT_DIR
	$LONG_PROCESS make -j$NUMBER_OF_PROCESSORS
	$LONG_PROCESS make install -j$NUMBER_OF_PROCESSORS

	if [ $? -ne 0 ]; then
		warning_message 'Errors while installing nginx'
	else
		success_message 'nginx was successfully installed!'
	fi
}

# I'm not calling this *installed because the virtualenv program is already
# installed in openshift. We'll just create the environment here, and tell it
# to use the newly installed Python
function check_virtualenv() {
	info_message 'Checking for existing virtualenv...'
	if [ -e $VIRTUALENV_DIR ]; then
		success_message 'Virtualenv exists!'
		return
	fi

	info_message 'Creating virtualenv...'
	$LONG_PROCESS virtualenv --system-site-packag $VIRTUALENV_DIR

	if [ $? -ne 0 ]; then
		warning_message 'Errors while creating virtualenv'
	else
		success_message 'The virtualenv was created!'
	fi
}

function check_uwsgi_installed() {
	info_message 'Checking for uWSGI...'
	activate_virtualenv
		
	if [ -z "$(pip freeze | grep uWSGI)" ]; then
		info_message 'Installling uWSGI...'
		$LONG_PROCESS pip install uWSGI

		if [ $? -ne 0 ]; then
			warning_message 'Errors while installing uWSGI'
		else
			success_message 'uWSGI was successfully installed!'
		fi
	else
		success_message 'uWSGI is installed!'
	fi

	deactivate
}

# install the user application requirements, if they exist
function install_user_packages() {
	REQUIREMENTS_FILE=$($USER_CONFIG --requirements)

	info_message "Checking for user ${REQUIREMENTS_FILE}..."
	if [ \! -f $REQUIREMENTS_FILE ]; then
		info_message "No $REQUIREMENTS_FILE found, moving on..."
		return
	fi

	info_message "Installing user packages in ${REQUIREMENTS_FILE}..."
	activate_virtualenv

	$LONG_PROCESS pip install -r $REQUIREMENTS_FILE

	if [ $? -ne 0 ]; then
		warning_message 'Errors while installing user packages'
	else
		success_message "User packages from $REQUIREMENTS_FILE were successfully installed"'!'
	fi

	deactivate
}

check_nginx_installed
check_virtualenv
check_uwsgi_installed

install_user_packages

